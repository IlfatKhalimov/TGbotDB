import sqlalchemy
import sqlalchemy as sq
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
import random
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

Base = declarative_base()


def create_tables(engine):
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)


class Dictionary(Base):
    __tablename__ = "dictionary"

    id = sq.Column(sq.Integer, primary_key=True)
    russian = sq.Column(sq.String(length=40), nullable=False)
    english = sq.Column(sq.String(length=40), nullable=False)

    def __str__(self):
        return f'{self.id}: {self.russian}: {self.english}'


class User(Base):
    __tablename__ = "user"

    id = sq.Column(sq.Integer, primary_key=True)
    token = sq.Column(sq.String(length=100), unique=True)

    def __str__(self):
        return f'{self.id}: {self.token}'


class Udictionary(Base):
    __tablename__ = "udictionary"

    id = sq.Column(sq.Integer, primary_key=True)
    did = sq.Column(sq.Integer, sq.ForeignKey("dictionary.id"), nullable=False)
    uid = sq.Column(sq.Integer, sq.ForeignKey("user.id"), nullable=False)

    dictionary = relationship(Dictionary, backref="udictionary")
    user = relationship(User, backref="udictionary")

    def __str__(self):
        return f'{self.id}: {self.did}: {self.uid}'


def fillin_dict():
    word1 = Dictionary(russian='–ú–∏—Ä', english='Peace')
    word2 = Dictionary(russian='–ü—Ä–∏–≤–µ—Ç', english='Hello')
    word3 = Dictionary(russian='–ë–µ–ª—ã–π', english='White')
    word4 = Dictionary(russian='–ó–µ–ª–µ–Ω—ã–π', english='Green')
    word5 = Dictionary(russian='–ß–µ—Ä–Ω—ã–π', english='Black')
    word6 = Dictionary(russian='–ö—Ä–∞—Å–Ω—ã–π', english='Red')
    word7 = Dictionary(russian='–û–Ω', english='He')
    word8 = Dictionary(russian='–û–Ω–∞', english='She')
    word9 = Dictionary(russian='–ú—ã', english='We')
    word10 = Dictionary(russian='–û–Ω–∏', english='They')
    word11 = Dictionary(russian='–ú–∞—à–∏–Ω–∞', english='Car')
    session.add_all([word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11])
    session.commit()


def fillin_u_dict(tb):
    global user_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–π –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¢–ì-—Ç–æ–∫–µ–Ω–∞ –≤ –ë–î
    user_begin = True  # –§–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É
    u_bot_token = User(token=tb)
    session.add(u_bot_token)
    session.commit()
    usr_added = session.query(User).filter(User.token == tb)
    for u in usr_added.all():
        user_id = u.id
        fillwords = session.query(Dictionary)
        for d in fillwords.all():
            # print(d.id, d.russian, d.english)
            u_word = Udictionary(did=d.id, uid=u.id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É Udictionary –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            # Dictionary —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session.add(u_word)
    session.commit()
    print('Udictionary –∑–∞–ø–æ–ª–Ω–µ–Ω')
    return user_begin


print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¢–ì-—Ç–æ–∫–µ–Ω: ")
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []
next_word = ''
user_id = 0
user_new = True


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    global buttons, next_word, user_new
    buttons = []
    others = []
    begin_range = 1
    end_range = begin_range + 4
    four_words = False
    target_word = ''
    translate = ''
    i = 1
    cid = message.chat.id
    if user_new:  # if user is new
        bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ "
                              "—É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
                              "–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:"
                         + '\n' + "   –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
                         + '\n' + "   —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô"
                         + '\n' + "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    uwords = (
        session.query(Udictionary.id, Dictionary.russian, Dictionary.english).join(Dictionary).join(User).filter
        (User.token == token_bot))  # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–æ–µ–Ω–æ–º token_bot
    first_word = []
    second_word = []
    third_word = []
    row_count = 0
    for row in uwords.all():  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∑–∞—Ü–∏–∫–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        row_count = row_count + 1
        if row_count == 1:
            first_word = row.english
        elif row_count == 2:
            second_word = row.english
        elif row_count == 3:
            third_word = row.english
    print('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', row_count)
    for w in uwords.all():
        if next_word == w.english:  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ—Ç—ã—Ä–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¢–ì-–±–æ—Ç–∞
            four_words = True
        if user_new or four_words:
            if i == begin_range:
                target_word = w.english
                translate = w.russian
                i = i + 1
                # print(w.russian, w.english)
            elif begin_range < i < end_range:
                if i == begin_range + 1:
                    next_word = w.english  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç —Ü–µ–ª–µ–≤—ã–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–∞–ª—å—à–µ"
                # print(w.russian, w.english)
                others.append(w.english)
                i = i + 1
            else:
                four_words = False
    if len(others) == 2:  # –ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ –Ω–∞ –ø–µ—Ä–≤—ã–µ - –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        others.append(first_word)
    elif len(others) == 1:
        others.append(first_word)
        others.append(second_word)
    elif len(others) == 0:
        others.append(first_word)
        others.append(second_word)
        others.append(third_word)
        next_word = first_word
    # print(len(others), next_word)
    user_new = False

    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        fillwords = session.query(Dictionary).filter(Dictionary.english == data['target_word'])
        for d in fillwords.all():
            session.query(Udictionary).filter(Udictionary.did == d.id, Udictionary.uid == user_id).delete()
            # –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä did) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Udictionary —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.commit()
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    global next_word
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–≥–æ –∂–µ
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        next_word = data['target_word']

    cid = message.chat.id

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
    word_query = bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:')
    bot.register_next_step_handler(word_query, word_write)

def word_write(message):
    english_word = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
    cid = message.chat.id

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    translate_query = bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:')
    bot.register_next_step_handler(translate_query, translate_write, english_word)

def translate_write(message, english_word):
    global user_id
    russian_translation = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    cid = message.chat.id

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    word = Dictionary(russian=russian_translation, english=english_word)
    session.add(word)
    new_word = session.query(Dictionary).filter(Dictionary.english == english_word)
    new_word_id = 0
    for w in new_word.all():
        new_word_id = w.id  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É
        # Udictionary
    user_word = Udictionary(did=new_word_id, uid=user_id)
    session.add(user_word)
    session.commit()
    bot.send_message(cid, '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')

    create_cards(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


if __name__ == '__main__':
    DSN = "postgresql://postgres:bazadannykh@localhost:5432/training_dictionary_db"
    engine = sqlalchemy.create_engine(DSN)
    create_tables(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    create_tables(engine)

    fillin_dict()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å

    # user_first = fillin_u_dict('Token1')
    # user_second = fillin_u_dict('Token2')
    user_new = fillin_u_dict(token_bot)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¢–ì-–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ Udictionary,
    # —Å–≤—è–∑—ã–≤–∞—é—â–µ–µ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.infinity_polling(skip_pending=True)